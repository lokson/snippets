
# inside controller
render json: Post.all
# other are file:, template:, text:, xml:, js:

# prawn - pdf writer library
# drawback: cannot create pdf from html

rails plugin new pdf_renderer
# creates:
# test/dummy - rails application to run tests
# pdf_renderer.gemspec
# lib/pdf_renderer.rb - this will be `require`d if target app adds gem to Gemfile
# lib/pdf_renderer/version.rb - referenced in gemspec as PdfRenderer::Version
# Gemfile - links reads dependencies from gemspec
# Rakefile - list tasks for plugin by standard rake -T

# booting dummy application
# 1. test/dummy/config/boot.rb sets $LOAD_PATH
# 2. test/dummy/config/application.rb loads dependencies
# 3. test/dummy/config/environment.rb initializes application

rake test

# renderer is hook for render method

# inside gemspec
s.add_dependency "prawn", "0.12.0"

# test prawn in irb
require "prawn"
pdf = Prawn::Document.new
pdf.text("A PDF in four lines of code")
pdf.render_file("sample.pdf")
# will create pdf in directory in which irb started

get '/home' => 'home#index', as: :home

# test for pdf response
assert_equal "binary", headers["Content-Transfer-Encoding"]
assert_equal "attachment; filename=\"contents.pdf\"", headers["Content-Disposition"]
assert_equal "application/pdf", headers["Content-Type"]

# Custom renderer (lib/pdf_renderer.rb)
pdf = Prawn::Document.new
pdf.text render_to_string(options)
send_data(pdf.render, filename: "#{filename}.pdf", disposition: "attachment")

# check test app in browser
cd test/dummy
rails s
http://localhost:3000/home.pdf

# ActionMailer and ActionController have common base: AbstractController
# includable modules (for any object)
AbstractController::Rendering
AbstractController::Layouts - support :layout option in render
ActionController::Rendering - check for DoubleRenderError and support :location, :status and :content_type options
ActionController::Renderers - api to write custom renderers
ActionController::Instrumentation - measure time in rendering stack
ActionController::Streaming - support :stream option

# implementation of render
def render(*args, &block)
  options = _normalize_render(*args, &block)
  self.response_body = render_to_body(options)
end

def _normalize_render(*args, &block)
  options = _normalize_args(*args, &block) # render(:new) becomes render(action: 'new')
  _normalize_options(options)
  options
end

def render_to_body(options = {})
  _process_options(options) # non template options like `render status: 401`
  _render_template(options)
end

# ActionView::Base is context for template evaluation
# it has methods like link_to
# it gets assigns by view_assigns

# Controller that does not send any ssigns to the view
class UsersController < AplicationController
  def view_assigns
    {}
  end
end

# pdf libraries
# Prawn
# Prince XML
# Flying Saucer (in java, port to JRuby)

